#pragma warning disable 1591
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.269
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Helpful.Models
{
	using System.Data.Linq;
	using System.Data.Linq.Mapping;
	using System.Data;
	using System.Collections.Generic;
	using System.Reflection;
	using System.Linq;
	using System.Linq.Expressions;
	using System.ComponentModel;
	using System;
	
	
	[global::System.Data.Linq.Mapping.DatabaseAttribute(Name="FeedbackScript")]
	public partial class trackingDataContext : System.Data.Linq.DataContext
	{
		
		private static System.Data.Linq.Mapping.MappingSource mappingSource = new AttributeMappingSource();
		
    #region Extensibility Method Definitions
    partial void OnCreated();
    partial void InsertComment(Comment instance);
    partial void UpdateComment(Comment instance);
    partial void DeleteComment(Comment instance);
    partial void InsertResponse(Response instance);
    partial void UpdateResponse(Response instance);
    partial void DeleteResponse(Response instance);
    #endregion
		
		public trackingDataContext() : 
				base(global::System.Configuration.ConfigurationManager.ConnectionStrings["FeedbackScriptConnectionString"].ConnectionString, mappingSource)
		{
			OnCreated();
		}
		
		public trackingDataContext(string connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public trackingDataContext(System.Data.IDbConnection connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public trackingDataContext(string connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public trackingDataContext(System.Data.IDbConnection connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public System.Data.Linq.Table<Comment> Comments
		{
			get
			{
				return this.GetTable<Comment>();
			}
		}
		
		public System.Data.Linq.Table<Response> Responses
		{
			get
			{
				return this.GetTable<Response>();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Comments")]
	public partial class Comment : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private long _Id;
		
		private string _Url;
		
		private string _Agency;
		
		private System.DateTime _UtcDate;
		
		private System.Nullable<bool> _Positive;
		
		private string _Comment1;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(long value);
    partial void OnIdChanged();
    partial void OnUrlChanging(string value);
    partial void OnUrlChanged();
    partial void OnAgencyChanging(string value);
    partial void OnAgencyChanged();
    partial void OnUtcDateChanging(System.DateTime value);
    partial void OnUtcDateChanged();
    partial void OnPositiveChanging(System.Nullable<bool> value);
    partial void OnPositiveChanged();
    partial void OnComment1Changing(string value);
    partial void OnComment1Changed();
    #endregion
		
		public Comment()
		{
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="BigInt NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public long Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Url", DbType="NVarChar(1024) NOT NULL", CanBeNull=false)]
		public string Url
		{
			get
			{
				return this._Url;
			}
			set
			{
				if ((this._Url != value))
				{
					this.OnUrlChanging(value);
					this.SendPropertyChanging();
					this._Url = value;
					this.SendPropertyChanged("Url");
					this.OnUrlChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Agency", DbType="VarChar(100)")]
		public string Agency
		{
			get
			{
				return this._Agency;
			}
			set
			{
				if ((this._Agency != value))
				{
					this.OnAgencyChanging(value);
					this.SendPropertyChanging();
					this._Agency = value;
					this.SendPropertyChanged("Agency");
					this.OnAgencyChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UtcDate", DbType="DateTime NOT NULL")]
		public System.DateTime UtcDate
		{
			get
			{
				return this._UtcDate;
			}
			set
			{
				if ((this._UtcDate != value))
				{
					this.OnUtcDateChanging(value);
					this.SendPropertyChanging();
					this._UtcDate = value;
					this.SendPropertyChanged("UtcDate");
					this.OnUtcDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Positive", DbType="Bit")]
		public System.Nullable<bool> Positive
		{
			get
			{
				return this._Positive;
			}
			set
			{
				if ((this._Positive != value))
				{
					this.OnPositiveChanging(value);
					this.SendPropertyChanging();
					this._Positive = value;
					this.SendPropertyChanged("Positive");
					this.OnPositiveChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Name="Comment", Storage="_Comment1", DbType="NVarChar(1024)")]
		public string Comment1
		{
			get
			{
				return this._Comment1;
			}
			set
			{
				if ((this._Comment1 != value))
				{
					this.OnComment1Changing(value);
					this.SendPropertyChanging();
					this._Comment1 = value;
					this.SendPropertyChanged("Comment1");
					this.OnComment1Changed();
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Responses")]
	public partial class Response : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private long _Id;
		
		private string _Url;
		
		private string _Agency;
		
		private System.DateTime _UtcDate;
		
		private System.Nullable<bool> _Positive;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(long value);
    partial void OnIdChanged();
    partial void OnUrlChanging(string value);
    partial void OnUrlChanged();
    partial void OnAgencyChanging(string value);
    partial void OnAgencyChanged();
    partial void OnUtcDateChanging(System.DateTime value);
    partial void OnUtcDateChanged();
    partial void OnPositiveChanging(System.Nullable<bool> value);
    partial void OnPositiveChanged();
    #endregion
		
		public Response()
		{
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="BigInt NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public long Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Url", DbType="NVarChar(1024) NOT NULL", CanBeNull=false)]
		public string Url
		{
			get
			{
				return this._Url;
			}
			set
			{
				if ((this._Url != value))
				{
					this.OnUrlChanging(value);
					this.SendPropertyChanging();
					this._Url = value;
					this.SendPropertyChanged("Url");
					this.OnUrlChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Agency", DbType="VarChar(100)")]
		public string Agency
		{
			get
			{
				return this._Agency;
			}
			set
			{
				if ((this._Agency != value))
				{
					this.OnAgencyChanging(value);
					this.SendPropertyChanging();
					this._Agency = value;
					this.SendPropertyChanged("Agency");
					this.OnAgencyChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UtcDate", DbType="DateTime NOT NULL")]
		public System.DateTime UtcDate
		{
			get
			{
				return this._UtcDate;
			}
			set
			{
				if ((this._UtcDate != value))
				{
					this.OnUtcDateChanging(value);
					this.SendPropertyChanging();
					this._UtcDate = value;
					this.SendPropertyChanged("UtcDate");
					this.OnUtcDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Positive", DbType="Bit")]
		public System.Nullable<bool> Positive
		{
			get
			{
				return this._Positive;
			}
			set
			{
				if ((this._Positive != value))
				{
					this.OnPositiveChanging(value);
					this.SendPropertyChanging();
					this._Positive = value;
					this.SendPropertyChanged("Positive");
					this.OnPositiveChanged();
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
}
#pragma warning restore 1591
